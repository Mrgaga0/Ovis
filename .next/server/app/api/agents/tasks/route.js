"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/agents/tasks/route";
exports.ids = ["app/api/agents/tasks/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fagents%2Ftasks%2Froute&page=%2Fapi%2Fagents%2Ftasks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fagents%2Ftasks%2Froute.ts&appDir=G%3A%5Covis%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=G%3A%5Covis&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fagents%2Ftasks%2Froute&page=%2Fapi%2Fagents%2Ftasks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fagents%2Ftasks%2Froute.ts&appDir=G%3A%5Covis%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=G%3A%5Covis&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var G_ovis_app_api_agents_tasks_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/agents/tasks/route.ts */ \"(rsc)/./app/api/agents/tasks/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/agents/tasks/route\",\n        pathname: \"/api/agents/tasks\",\n        filename: \"route\",\n        bundlePath: \"app/api/agents/tasks/route\"\n    },\n    resolvedPagePath: \"G:\\\\ovis\\\\app\\\\api\\\\agents\\\\tasks\\\\route.ts\",\n    nextConfigOutput,\n    userland: G_ovis_app_api_agents_tasks_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/agents/tasks/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhZ2VudHMlMkZ0YXNrcyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYWdlbnRzJTJGdGFza3MlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhZ2VudHMlMkZ0YXNrcyUyRnJvdXRlLnRzJmFwcERpcj1HJTNBJTVDb3ZpcyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RyUzQSU1Q292aXMmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDTDtBQUN4RTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL292aXMvP2E3NTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRzpcXFxcb3Zpc1xcXFxhcHBcXFxcYXBpXFxcXGFnZW50c1xcXFx0YXNrc1xcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYWdlbnRzL3Rhc2tzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWdlbnRzL3Rhc2tzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hZ2VudHMvdGFza3Mvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJHOlxcXFxvdmlzXFxcXGFwcFxcXFxhcGlcXFxcYWdlbnRzXFxcXHRhc2tzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2FnZW50cy90YXNrcy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fagents%2Ftasks%2Froute&page=%2Fapi%2Fagents%2Ftasks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fagents%2Ftasks%2Froute.ts&appDir=G%3A%5Covis%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=G%3A%5Covis&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/agents/tasks/route.ts":
/*!***************************************!*\
  !*** ./app/api/agents/tasks/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _services_ai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/ai */ \"(rsc)/./services/ai/index.ts\");\n/* harmony import */ var _services_ai_TaskAgent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/ai/TaskAgent */ \"(rsc)/./services/ai/TaskAgent.ts\");\n\n\n\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_1__.PrismaClient();\nconst registry = _services_ai__WEBPACK_IMPORTED_MODULE_2__.AgentRegistry.getInstance();\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { agentId, type, data } = body;\n        // 데이터 유효성 검사\n        if (!agentId || !type || !data) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"agentId, type, data는 필수 입력 항목입니다.\"\n            }, {\n                status: 400\n            });\n        }\n        // 에이전트 존재 확인\n        const agent = await prisma.agent.findUnique({\n            where: {\n                id: agentId\n            }\n        });\n        if (!agent) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"에이전트를 찾을 수 없습니다.\"\n            }, {\n                status: 404\n            });\n        }\n        // 작업 생성\n        const task = await prisma.agentTask.create({\n            data: {\n                agentId,\n                type,\n                status: \"pending\",\n                data: JSON.stringify(data)\n            }\n        });\n        // 런타임 에이전트에 작업 할당\n        const runtimeAgent = registry.getAgent(agentId);\n        if (runtimeAgent && runtimeAgent instanceof _services_ai_TaskAgent__WEBPACK_IMPORTED_MODULE_3__.TaskAgent) {\n            // 비동기로 작업 처리 시작\n            process.nextTick(async ()=>{\n                try {\n                    // TaskAgent의 메시지 처리 기능을 사용\n                    await runtimeAgent.handleMessage({\n                        type: \"PROCESS_TASK\",\n                        content: {\n                            taskId: task.id\n                        }\n                    });\n                // 작업이 정상적으로 큐에 추가되었으므로 DB에 상태 업데이트는 필요 없음\n                } catch (error) {\n                    console.error(`작업 처리 중 오류 발생: ${error}`);\n                    // 작업 상태 업데이트\n                    await prisma.agentTask.update({\n                        where: {\n                            id: task.id\n                        },\n                        data: {\n                            status: \"failed\",\n                            result: JSON.stringify({\n                                error: `작업 처리 중 오류 발생: ${error}`\n                            })\n                        }\n                    });\n                }\n            });\n        } else {\n            // 런타임 에이전트가 없거나 TaskAgent가 아닌 경우 작업 상태 업데이트\n            await prisma.agentTask.update({\n                where: {\n                    id: task.id\n                },\n                data: {\n                    status: \"error\",\n                    result: JSON.stringify({\n                        error: \"유효한 TaskAgent가 초기화되지 않았습니다.\"\n                    })\n                }\n            });\n        }\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(task);\n    } catch (error) {\n        console.error(\"작업 생성 오류:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"작업 생성 중 오류가 발생했습니다.\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    try {\n        const searchParams = request.nextUrl.searchParams;\n        const agentId = searchParams.get(\"agentId\");\n        const status = searchParams.get(\"status\");\n        const limit = parseInt(searchParams.get(\"limit\") || \"10\");\n        // 검색 조건 구성\n        const where = {};\n        if (agentId) {\n            where.agentId = agentId;\n        }\n        if (status) {\n            where.status = status;\n        }\n        // 작업 조회\n        const tasks = await prisma.agentTask.findMany({\n            where,\n            orderBy: {\n                createdAt: \"desc\"\n            },\n            take: limit\n        });\n        // 데이터 파싱\n        const formattedTasks = tasks.map((task)=>({\n                ...task,\n                data: task.data ? JSON.parse(task.data) : null,\n                result: task.result ? JSON.parse(task.result) : null\n            }));\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(formattedTasks);\n    } catch (error) {\n        console.error(\"작업 조회 오류:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"작업 조회 중 오류가 발생했습니다.\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/agents/tasks/route.ts\n");

/***/ }),

/***/ "(rsc)/./services/ai/AgentCoordinator.ts":
/*!*****************************************!*\
  !*** ./services/ai/AgentCoordinator.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentCoordinator: () => (/* binding */ AgentCoordinator)\n/* harmony export */ });\n/* harmony import */ var _AgentRegistry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AgentRegistry */ \"(rsc)/./services/ai/AgentRegistry.ts\");\n\nclass AgentCoordinator {\n    constructor(options){\n        this.registry = _AgentRegistry__WEBPACK_IMPORTED_MODULE_0__.AgentRegistry.getInstance();\n        this.tasks = new Map();\n        this.activeTaskCount = 0;\n        this.maxConcurrentTasks = options?.maxConcurrentTasks || 5;\n        this.defaultTimeout = options?.defaultTimeout || 30000; // 30초\n        this.maxRetries = options?.maxRetries || 3;\n    }\n    static getInstance(options) {\n        if (!AgentCoordinator.instance) {\n            AgentCoordinator.instance = new AgentCoordinator(options);\n        }\n        return AgentCoordinator.instance;\n    }\n    async createTask(type, agents, data) {\n        // 모든 에이전트가 존재하는지 확인\n        for (const agentId of agents){\n            if (!this.registry.getAgent(agentId)) {\n                throw new Error(`에이전트 ID '${agentId}'를 찾을 수 없습니다.`);\n            }\n        }\n        const taskId = `task-${Date.now()}-${Math.floor(Math.random() * 10000)}`;\n        const task = {\n            id: taskId,\n            type,\n            agents,\n            status: \"pending\",\n            data,\n            createdAt: Date.now(),\n            updatedAt: Date.now()\n        };\n        this.tasks.set(taskId, task);\n        this.scheduleTask();\n        return task;\n    }\n    getTask(taskId) {\n        return this.tasks.get(taskId);\n    }\n    getAllTasks() {\n        return Array.from(this.tasks.values());\n    }\n    getTasksByStatus(status) {\n        return this.getAllTasks().filter((task)=>task.status === status);\n    }\n    async scheduleTask() {\n        // 동시 작업 제한에 도달한 경우\n        if (this.activeTaskCount >= this.maxConcurrentTasks) {\n            return;\n        }\n        // 대기 중인 작업 찾기\n        const pendingTasks = this.getTasksByStatus(\"pending\");\n        if (pendingTasks.length === 0) {\n            return;\n        }\n        // 다음 작업 실행\n        const nextTask = pendingTasks[0];\n        this.executeTask(nextTask.id);\n    }\n    async executeTask(taskId) {\n        const task = this.tasks.get(taskId);\n        if (!task || task.status !== \"pending\") {\n            return;\n        }\n        // 작업 상태 업데이트\n        task.status = \"running\";\n        task.updatedAt = Date.now();\n        this.activeTaskCount++;\n        try {\n            // 각 에이전트에 메시지 전송\n            const results = new Map();\n            for (const agentId of task.agents){\n                const message = {\n                    type: task.type,\n                    content: task.data,\n                    metadata: {\n                        timestamp: Date.now(),\n                        sender: \"coordinator\",\n                        recipient: agentId\n                    }\n                };\n                // 변수 초기화\n                let response = {\n                    success: false,\n                    error: \"초기 응답이 설정되지 않음\",\n                    metadata: {\n                        timestamp: Date.now(),\n                        processingTime: 0\n                    }\n                };\n                let retries = 0;\n                // 재시도 메커니즘\n                do {\n                    try {\n                        response = await this.sendMessageWithTimeout(agentId, message, this.defaultTimeout);\n                        break;\n                    } catch (error) {\n                        retries++;\n                        if (retries >= this.maxRetries) {\n                            throw error;\n                        }\n                        // 지수 백오프 재시도\n                        await new Promise((resolve)=>setTimeout(resolve, 1000 * Math.pow(2, retries - 1)));\n                    }\n                }while (retries < this.maxRetries);\n                results.set(agentId, response);\n            }\n            // 작업 완료 처리\n            task.status = \"completed\";\n            task.results = results;\n            task.updatedAt = Date.now();\n        } catch (error) {\n            // 작업 실패 처리\n            task.status = \"failed\";\n            task.updatedAt = Date.now();\n            console.error(`작업 실행 오류 (${taskId}):`, error);\n        } finally{\n            this.activeTaskCount--;\n            this.scheduleTask(); // 다음 작업 스케줄링\n        }\n    }\n    async sendMessageWithTimeout(agentId, message, timeout) {\n        return Promise.race([\n            this.registry.sendMessage(agentId, message),\n            new Promise((_, reject)=>{\n                setTimeout(()=>reject(new Error(`메시지 처리 시간 초과 (${timeout}ms)`)), timeout);\n            })\n        ]);\n    }\n    reset() {\n        this.tasks.clear();\n        this.activeTaskCount = 0;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./services/ai/AgentCoordinator.ts\n");

/***/ }),

/***/ "(rsc)/./services/ai/AgentRegistry.ts":
/*!**************************************!*\
  !*** ./services/ai/AgentRegistry.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentRegistry: () => (/* binding */ AgentRegistry)\n/* harmony export */ });\nclass AgentRegistry {\n    constructor(){\n        this.agents = new Map();\n        this.agentsByName = new Map();\n    }\n    static getInstance() {\n        if (!AgentRegistry.instance) {\n            AgentRegistry.instance = new AgentRegistry();\n        }\n        return AgentRegistry.instance;\n    }\n    registerAgent(agent) {\n        const id = agent.getId();\n        const name = agent.getName();\n        if (this.agents.has(id)) {\n            throw new Error(`ID가 '${id}'인 에이전트가 이미 등록되어 있습니다.`);\n        }\n        if (this.agentsByName.has(name)) {\n            throw new Error(`이름이 '${name}'인 에이전트가 이미 등록되어 있습니다.`);\n        }\n        this.agents.set(id, agent);\n        this.agentsByName.set(name, agent);\n    }\n    getAgent(idOrName) {\n        return this.agents.get(idOrName) || this.agentsByName.get(idOrName);\n    }\n    removeAgent(idOrName) {\n        const agent = this.getAgent(idOrName);\n        if (!agent) {\n            return false;\n        }\n        const id = agent.getId();\n        const name = agent.getName();\n        this.agents.delete(id);\n        this.agentsByName.delete(name);\n        return true;\n    }\n    async sendMessage(recipientIdOrName, message) {\n        const agent = this.getAgent(recipientIdOrName);\n        if (!agent) {\n            return {\n                success: false,\n                error: `수신자 '${recipientIdOrName}'를 찾을 수 없습니다.`,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        }\n        return agent.handleMessage(message);\n    }\n    async broadcastMessage(message) {\n        const responses = new Map();\n        const agentEntries = Array.from(this.agents.entries());\n        for (const [id, agent] of agentEntries){\n            responses.set(id, await agent.handleMessage(message));\n        }\n        return responses;\n    }\n    getAllAgents() {\n        return Array.from(this.agents.values());\n    }\n    getAgentCount() {\n        return this.agents.size;\n    }\n    async initializeAllAgents() {\n        const results = new Map();\n        const agentEntries = Array.from(this.agents.entries());\n        for (const [id, agent] of agentEntries){\n            try {\n                await agent.initialize();\n                results.set(id, true);\n            } catch (error) {\n                console.error(`에이전트 초기화 오류 (${id}):`, error);\n                results.set(id, false);\n            }\n        }\n        return results;\n    }\n    async shutdownAllAgents() {\n        const results = new Map();\n        const agentEntries = Array.from(this.agents.entries());\n        for (const [id, agent] of agentEntries){\n            try {\n                await agent.shutdown();\n                results.set(id, true);\n            } catch (error) {\n                console.error(`에이전트 종료 오류 (${id}):`, error);\n                results.set(id, false);\n            }\n        }\n        return results;\n    }\n    reset() {\n        this.agents.clear();\n        this.agentsByName.clear();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./services/ai/AgentRegistry.ts\n");

/***/ }),

/***/ "(rsc)/./services/ai/BaseAgent.ts":
/*!**********************************!*\
  !*** ./services/ai/BaseAgent.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseAgent: () => (/* binding */ BaseAgent)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n\nclass BaseAgent {\n    constructor(options){\n        this.id = options?.id || (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        this.name = options?.name || `agent-${this.id.substring(0, 8)}`;\n        this.status = \"initializing\";\n        this.messageHandlers = new Map();\n        this.startTime = Date.now();\n    }\n    getId() {\n        return this.id;\n    }\n    getName() {\n        return this.name;\n    }\n    getStatus() {\n        return this.status;\n    }\n    getUptime() {\n        return Date.now() - this.startTime;\n    }\n    async initialize() {\n        try {\n            await this.onInitialize();\n            this.status = \"running\";\n        } catch (error) {\n            this.status = \"error\";\n            console.error(`초기화 오류 (${this.name}):`, error);\n            throw error;\n        }\n    }\n    async shutdown() {\n        try {\n            await this.onShutdown();\n            this.status = \"shutdown\";\n        } catch (error) {\n            this.status = \"error\";\n            console.error(`종료 오류 (${this.name}):`, error);\n            throw error;\n        }\n    }\n    async handleMessage(message) {\n        const startTime = Date.now();\n        try {\n            if (this.status !== \"running\") {\n                return {\n                    success: false,\n                    error: `에이전트가 실행 중이 아닙니다. 현재 상태: ${this.status}`,\n                    metadata: {\n                        processingTime: Date.now() - startTime,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            const handler = this.messageHandlers.get(message.type);\n            if (!handler) {\n                return {\n                    success: false,\n                    error: `메시지 타입 '${message.type}'에 대한 핸들러가 없습니다.`,\n                    metadata: {\n                        processingTime: Date.now() - startTime,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            const response = await handler(message);\n            return {\n                ...response,\n                metadata: {\n                    ...response.metadata,\n                    processingTime: Date.now() - startTime,\n                    timestamp: Date.now()\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `메시지 처리 오류: ${error instanceof Error ? error.message : String(error)}`,\n                metadata: {\n                    processingTime: Date.now() - startTime,\n                    timestamp: Date.now()\n                }\n            };\n        }\n    }\n    registerHandler(type, handler) {\n        this.messageHandlers.set(type, handler);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./services/ai/BaseAgent.ts\n");

/***/ }),

/***/ "(rsc)/./services/ai/TaskAgent.ts":
/*!**********************************!*\
  !*** ./services/ai/TaskAgent.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaskAgent: () => (/* binding */ TaskAgent)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var _BaseAgent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseAgent */ \"(rsc)/./services/ai/BaseAgent.ts\");\n\n\nclass TaskAgent extends _BaseAgent__WEBPACK_IMPORTED_MODULE_0__.BaseAgent {\n    constructor(options){\n        super(options);\n        this.tasks = new Map();\n        this.taskQueue = [];\n        this.activeTaskCount = 0;\n        this.maxConcurrentTasks = options?.maxConcurrentTasks || 3;\n        // 메시지 핸들러 등록\n        this.registerHandler(\"CREATE_TASK\", this.handleCreateTask.bind(this));\n        this.registerHandler(\"GET_TASK\", this.handleGetTask.bind(this));\n        this.registerHandler(\"UPDATE_TASK\", this.handleUpdateTask.bind(this));\n        this.registerHandler(\"DELETE_TASK\", this.handleDeleteTask.bind(this));\n        this.registerHandler(\"LIST_TASKS\", this.handleListTasks.bind(this));\n        this.registerHandler(\"PROCESS_TASK\", this.handleProcessTask.bind(this));\n    }\n    async onInitialize() {\n        // 초기화 로직 구현\n        console.log(`TaskAgent(${this.id}) 초기화 됨`);\n    }\n    async onShutdown() {\n        // 종료 로직 구현\n        console.log(`TaskAgent(${this.id}) 종료 됨`);\n    }\n    async handleCreateTask(message) {\n        try {\n            const { type, priority = 0, data } = message.content;\n            if (!type) {\n                return {\n                    success: false,\n                    error: \"작업 타입은 필수입니다.\",\n                    metadata: {\n                        processingTime: 0,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            const taskId = (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n            const task = {\n                id: taskId,\n                type,\n                priority,\n                status: \"pending\",\n                data,\n                createdAt: Date.now(),\n                updatedAt: Date.now()\n            };\n            this.tasks.set(taskId, task);\n            this.addToQueue(taskId);\n            return {\n                success: true,\n                data: task,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `작업 생성 오류: ${error instanceof Error ? error.message : String(error)}`,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        }\n    }\n    async handleGetTask(message) {\n        try {\n            const { taskId } = message.content;\n            if (!taskId) {\n                return {\n                    success: false,\n                    error: \"작업 ID는 필수입니다.\",\n                    metadata: {\n                        processingTime: 0,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            const task = this.tasks.get(taskId);\n            if (!task) {\n                return {\n                    success: false,\n                    error: `작업 ID '${taskId}'를 찾을 수 없습니다.`,\n                    metadata: {\n                        processingTime: 0,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            return {\n                success: true,\n                data: task,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `작업 조회 오류: ${error instanceof Error ? error.message : String(error)}`,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        }\n    }\n    async handleUpdateTask(message) {\n        try {\n            const { id, data } = message.content;\n            if (!id) {\n                return {\n                    success: false,\n                    error: \"작업 ID는 필수입니다.\",\n                    metadata: {\n                        processingTime: 0,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            const task = this.tasks.get(id);\n            if (!task) {\n                return {\n                    success: false,\n                    error: `작업 ID '${id}'를 찾을 수 없습니다.`,\n                    metadata: {\n                        processingTime: 0,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            // 작업 데이터 업데이트\n            task.data = {\n                ...task.data,\n                ...data\n            };\n            task.updatedAt = Date.now();\n            return {\n                success: true,\n                data: task,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `작업 업데이트 오류: ${error instanceof Error ? error.message : String(error)}`,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        }\n    }\n    async handleDeleteTask(message) {\n        try {\n            const { taskId } = message.content;\n            if (!taskId) {\n                return {\n                    success: false,\n                    error: \"작업 ID는 필수입니다.\",\n                    metadata: {\n                        processingTime: 0,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            const deleted = this.tasks.delete(taskId);\n            // 큐에서도 제거\n            const queueIndex = this.taskQueue.indexOf(taskId);\n            if (queueIndex > -1) {\n                this.taskQueue.splice(queueIndex, 1);\n            }\n            return {\n                success: deleted,\n                data: deleted,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `작업 삭제 오류: ${error instanceof Error ? error.message : String(error)}`,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        }\n    }\n    async handleListTasks(message) {\n        try {\n            const { status, type } = message.content;\n            let tasks = Array.from(this.tasks.values());\n            // 필터링\n            if (status) {\n                tasks = tasks.filter((task)=>task.status === status);\n            }\n            if (type) {\n                tasks = tasks.filter((task)=>task.type === type);\n            }\n            return {\n                success: true,\n                data: tasks,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `작업 목록 조회 오류: ${error instanceof Error ? error.message : String(error)}`,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        }\n    }\n    async handleProcessTask(message) {\n        try {\n            const { taskId } = message.content;\n            if (!taskId) {\n                return {\n                    success: false,\n                    error: \"작업 ID는 필수입니다.\",\n                    metadata: {\n                        processingTime: 0,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            const task = this.tasks.get(taskId);\n            if (!task) {\n                return {\n                    success: false,\n                    error: `작업 ID '${taskId}'를 찾을 수 없습니다.`,\n                    metadata: {\n                        processingTime: 0,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            // 작업이 대기 상태가 아닌 경우\n            if (task.status !== \"pending\") {\n                return {\n                    success: false,\n                    error: `작업의 상태가 'pending'이 아닙니다. 현재 상태: ${task.status}`,\n                    metadata: {\n                        processingTime: 0,\n                        timestamp: Date.now()\n                    }\n                };\n            }\n            // 작업 실행\n            this.processTask(taskId);\n            return {\n                success: true,\n                data: {\n                    message: `작업 '${taskId}' 처리 중`\n                },\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `작업 처리 오류: ${error instanceof Error ? error.message : String(error)}`,\n                metadata: {\n                    processingTime: 0,\n                    timestamp: Date.now()\n                }\n            };\n        }\n    }\n    addToQueue(taskId) {\n        const task = this.tasks.get(taskId);\n        if (!task) return;\n        // 우선순위 기반으로 큐에 삽입\n        let inserted = false;\n        for(let i = 0; i < this.taskQueue.length; i++){\n            const queuedTask = this.tasks.get(this.taskQueue[i]);\n            if (queuedTask && task.priority < queuedTask.priority) {\n                this.taskQueue.splice(i, 0, taskId);\n                inserted = true;\n                break;\n            }\n        }\n        if (!inserted) {\n            this.taskQueue.push(taskId);\n        }\n        // 작업 스케줄링\n        this.scheduleTasks();\n    }\n    async scheduleTasks() {\n        // 동시 작업 제한에 도달한 경우\n        if (this.activeTaskCount >= this.maxConcurrentTasks) {\n            return;\n        }\n        // 대기 중인 작업이 없는 경우\n        if (this.taskQueue.length === 0) {\n            return;\n        }\n        // 다음 작업 실행\n        const nextTaskId = this.taskQueue.shift();\n        if (nextTaskId) {\n            this.processTask(nextTaskId);\n        }\n    }\n    async processTask(taskId) {\n        const task = this.tasks.get(taskId);\n        if (!task || task.status !== \"pending\") {\n            return;\n        }\n        // 작업 상태 업데이트\n        task.status = \"processing\";\n        task.updatedAt = Date.now();\n        this.activeTaskCount++;\n        try {\n            // 작업 유형에 따른 처리 로직\n            const result = await this.executeTaskByType(task);\n            // 작업 완료 처리\n            task.status = \"completed\";\n            task.result = result;\n            task.updatedAt = Date.now();\n        } catch (error) {\n            // 작업 실패 처리\n            task.status = \"failed\";\n            task.error = error instanceof Error ? error.message : String(error);\n            task.updatedAt = Date.now();\n            console.error(`작업 처리 오류 (${taskId}):`, error);\n        } finally{\n            this.activeTaskCount--;\n            this.scheduleTasks(); // 다음 작업 스케줄링\n        }\n    }\n    async executeTaskByType(task) {\n        // 작업 유형에 따른 처리 로직 구현\n        // 실제 구현에서는 다양한 작업 유형에 따른 로직을 추가\n        switch(task.type){\n            case \"data_processing\":\n                // 데이터 처리 로직\n                return this.processData(task.data);\n            case \"notification\":\n                // 알림 로직\n                return this.sendNotification(task.data);\n            default:\n                // 기본 처리 로직\n                return {\n                    message: `'${task.type}' 유형의 작업 처리 완료`\n                };\n        }\n    }\n    async processData(data) {\n        // 데이터 처리 로직 구현\n        // 임시 구현: 지연 시뮬레이션\n        await new Promise((resolve)=>setTimeout(resolve, 1000));\n        return {\n            processed: data\n        };\n    }\n    async sendNotification(data) {\n        // 알림 로직 구현\n        // 임시 구현: 지연 시뮬레이션\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        return {\n            sent: true,\n            message: data.message\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./services/ai/TaskAgent.ts\n");

/***/ }),

/***/ "(rsc)/./services/ai/index.ts":
/*!******************************!*\
  !*** ./services/ai/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentCoordinator: () => (/* reexport safe */ _AgentCoordinator__WEBPACK_IMPORTED_MODULE_2__.AgentCoordinator),\n/* harmony export */   AgentRegistry: () => (/* reexport safe */ _AgentRegistry__WEBPACK_IMPORTED_MODULE_1__.AgentRegistry),\n/* harmony export */   BaseAgent: () => (/* reexport safe */ _BaseAgent__WEBPACK_IMPORTED_MODULE_0__.BaseAgent),\n/* harmony export */   TaskAgent: () => (/* reexport safe */ _TaskAgent__WEBPACK_IMPORTED_MODULE_3__.TaskAgent)\n/* harmony export */ });\n/* harmony import */ var _BaseAgent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseAgent */ \"(rsc)/./services/ai/BaseAgent.ts\");\n/* harmony import */ var _AgentRegistry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AgentRegistry */ \"(rsc)/./services/ai/AgentRegistry.ts\");\n/* harmony import */ var _AgentCoordinator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AgentCoordinator */ \"(rsc)/./services/ai/AgentCoordinator.ts\");\n/* harmony import */ var _TaskAgent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TaskAgent */ \"(rsc)/./services/ai/TaskAgent.ts\");\n\n\n\n\n// 클래스 내보내기\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zZXJ2aWNlcy9haS9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRjtBQUN0QztBQUMrQztBQUM5QjtBQUVqRSxXQUFXO0FBQ3NEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3Zpcy8uL3NlcnZpY2VzL2FpL2luZGV4LnRzPzYwMzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUFnZW50LCBJQWdlbnRNZXNzYWdlLCBJQWdlbnRSZXNwb25zZSwgSUFnZW50T3B0aW9ucyB9IGZyb20gJy4vQmFzZUFnZW50JztcclxuaW1wb3J0IHsgQWdlbnRSZWdpc3RyeSB9IGZyb20gJy4vQWdlbnRSZWdpc3RyeSc7XHJcbmltcG9ydCB7IEFnZW50Q29vcmRpbmF0b3IsIElDb29yZGluYXRpb25UYXNrLCBJQ29vcmRpbmF0aW9uT3B0aW9ucyB9IGZyb20gJy4vQWdlbnRDb29yZGluYXRvcic7XHJcbmltcG9ydCB7IFRhc2tBZ2VudCwgSVRhc2ssIFRhc2tBZ2VudE9wdGlvbnMgfSBmcm9tICcuL1Rhc2tBZ2VudCc7XHJcblxyXG4vLyDtgbTrnpjsiqQg64K067O064K06riwXHJcbmV4cG9ydCB7IEJhc2VBZ2VudCwgQWdlbnRSZWdpc3RyeSwgQWdlbnRDb29yZGluYXRvciwgVGFza0FnZW50IH07XHJcblxyXG4vLyDtg4DsnoUg64K067O064K06riwXHJcbmV4cG9ydCB0eXBlIHtcclxuICBJQWdlbnRNZXNzYWdlLFxyXG4gIElBZ2VudFJlc3BvbnNlLFxyXG4gIElBZ2VudE9wdGlvbnMsXHJcbiAgSUNvb3JkaW5hdGlvblRhc2ssXHJcbiAgSUNvb3JkaW5hdGlvbk9wdGlvbnMsXHJcbiAgSVRhc2ssXHJcbiAgVGFza0FnZW50T3B0aW9uc1xyXG59OyAiXSwibmFtZXMiOlsiQmFzZUFnZW50IiwiQWdlbnRSZWdpc3RyeSIsIkFnZW50Q29vcmRpbmF0b3IiLCJUYXNrQWdlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./services/ai/index.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/uuid"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fagents%2Ftasks%2Froute&page=%2Fapi%2Fagents%2Ftasks%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fagents%2Ftasks%2Froute.ts&appDir=G%3A%5Covis%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=G%3A%5Covis&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();